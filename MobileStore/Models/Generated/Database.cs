




















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `MobileStoreConnection`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.\SQLEXPRESS;Initial Catalog=MobileStore;Integrated Security=True`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace MobileStoreConnection
{

	public partial class MobileStoreConnectionDB : Database
	{
		public MobileStoreConnectionDB() 
			: base("MobileStoreConnection")
		{
			CommonConstruct();
		}

		public MobileStoreConnectionDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			MobileStoreConnectionDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static MobileStoreConnectionDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new MobileStoreConnectionDB();
        }

		[ThreadStatic] static MobileStoreConnectionDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static MobileStoreConnectionDB repo { get { return MobileStoreConnectionDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("dbo.Carts")]



	[PrimaryKey("ProductID", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class Cart : MobileStoreConnectionDB.Record<Cart>  
    {



		[Column] public int ProductID { get; set; }





		[Column] public int CustomerID { get; set; }





		[Column] public int? amount { get; set; }



	}

    

	[TableName("dbo.Categories")]



	[PrimaryKey("CategoryID")]




	[ExplicitColumns]

    public partial class Category : MobileStoreConnectionDB.Record<Category>  
    {



		[Column] public int CategoryID { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("dbo.Comments")]



	[PrimaryKey("CustomerID", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class Comment : MobileStoreConnectionDB.Record<Comment>  
    {



		[Column] public int CustomerID { get; set; }





		[Column] public int ProductID { get; set; }





		[Column] public DateTime CommentTime { get; set; }





		[Column] public string Content { get; set; }



	}

    

	[TableName("dbo.Customers")]



	[PrimaryKey("CustomerID")]




	[ExplicitColumns]

    public partial class Customer : MobileStoreConnectionDB.Record<Customer>  
    {



		[Column] public int CustomerID { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string PhoneNumber { get; set; }





		[Column] public string Email { get; set; }





		[Column] public string Password { get; set; }



	}

    

	[TableName("dbo.HasSpecification")]



	[PrimaryKey("ProductID", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class HasSpecification : MobileStoreConnectionDB.Record<HasSpecification>  
    {



		[Column] public int ProductID { get; set; }





		[Column] public int SpecificationID { get; set; }





		[Column] public string Value { get; set; }



	}

    

	[TableName("dbo.Orders")]



	[PrimaryKey("CustomerID", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class Order : MobileStoreConnectionDB.Record<Order>  
    {



		[Column] public int CustomerID { get; set; }





		[Column] public int ProductID { get; set; }





		[Column] public DateTime OrderTime { get; set; }





		[Column] public int? amount { get; set; }



	}

    

	[TableName("dbo.Producers")]



	[PrimaryKey("ProducerID")]




	[ExplicitColumns]

    public partial class Producer : MobileStoreConnectionDB.Record<Producer>  
    {



		[Column] public int ProducerID { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("dbo.Products")]



	[PrimaryKey("ProductID")]




	[ExplicitColumns]

    public partial class Product : MobileStoreConnectionDB.Record<Product>  
    {



		[Column] public int ProductID { get; set; }





		[Column] public string Name { get; set; }





		[Column] public int? Quantity { get; set; }





		[Column] public string Description { get; set; }





		[Column] public bool? Status { get; set; }





		[Column] public int? Price { get; set; }





		[Column] public string Image { get; set; }





		[Column] public int? ProducerID { get; set; }





		[Column] public int? CategoryID { get; set; }



	}

    

	[TableName("dbo.ProductSpecifications")]



	[PrimaryKey("SpecificationID")]




	[ExplicitColumns]

    public partial class ProductSpecification : MobileStoreConnectionDB.Record<ProductSpecification>  
    {



		[Column] public int SpecificationID { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string Description { get; set; }



	}

    

	[TableName("dbo.Rates")]



	[PrimaryKey("ProductID", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class Rate : MobileStoreConnectionDB.Record<Rate>  
    {



		[Column] public int ProductID { get; set; }





		[Column] public int CustomerID { get; set; }





		[Column] public int? starts { get; set; }



	}

    

	[TableName("dbo.SpecificationValues")]



	[PrimaryKey("SpecificationID", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class SpecificationValue : MobileStoreConnectionDB.Record<SpecificationValue>  
    {



		[Column] public int SpecificationID { get; set; }





		[Column] public string Value { get; set; }



	}


}
